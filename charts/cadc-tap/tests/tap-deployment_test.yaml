suite: TAP deployment
templates:
  - tap-deployment.yaml

tests:
  - it: should configure environment variables correctly for PostgreSQL backend
    set:
      config:
        backend: "pg"
        pg:
          username: "postgres"
          host: "postgres-server"
          database: "tapdb"
          image:
            repository: "postgres"
            tag: "latest"
            pullPolicy: "IfNotPresent"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Dtap.username=postgres"
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Dtap.url=jdbc:postgresql://postgres-server/tapdb"

  - it: should configure environment variables correctly for Qserv backend
    set:
      cloudsql:
        enabled: false
      config:
        backend: "qserv"
        qserv:
          host: "mock-db:3306"
          image:
            repository: "qserv"
            tag: "latest"
            pullPolicy: "IfNotPresent"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Dqservuser.username=qsmaster"
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Dqservuser.url=jdbc:mysql://mock-db:3306/"

  - it: should configure UWS database environment variables for Cloud SQL
    set:
      cloudsql:
        enabled: true
        instanceConnectionName: "science-platform--xyz:test"
        serviceAccount: "sa@xyz"
      global:
        host: "example.com"
      config:
        pg:
          username: "postgres"
          host: "postgres-server"
          database: "tapdb"
          image:
            repository: "postgres"
            tag: "latest"
            pullPolicy: "IfNotPresent"
        uwsDatabaseUsername: "cloudsql-user"
        uwsDatabaseUrl: "cloudsql-instance-url"
      serviceAccount:
        name: "ssotap"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.username=cloudsql-user"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.url=jdbc:cloudsql-instance-url"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.password="
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "ssotap"

  - it: Should configure uws for Cloud SQL as before, but this time serviceAccount not passed in
    set:
      cloudsql:
        enabled: true
        instanceConnectionName: "science-platform--xyz:test"
        serviceAccount: "sa@xyz"
      global:
        host: "example.com"
      config:
        pg:
          username: "postgres"
          host: "postgres-server"
          database: "tapdb"
          image:
            repository: "postgres"
            tag: "latest"
            pullPolicy: "IfNotPresent"
        uwsDatabaseUsername: "cloudsql-user"
        uwsDatabaseUrl: "cloudsql-instance-url"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.username=cloudsql-user"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.url=jdbc:cloudsql-instance-url"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.password="
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "cadc-tap"

  - it: should configure UWS database environment variables to use the Chart's Postgres
    set:
      cloudsql:
        enabled: false
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Duws.username=postgres"
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Duws.url=jdbc:postgresql://cadc-tap-uws-db/"

  - it: should create two containers if cloudsql is enabled
    set:
      cloudsql:
        enabled: true
        instanceConnectionName: "science-platform--xyz:test"
        serviceAccount: "sa@xyz"
      global:
        host: "example.com"
      config:
        pg:
          username: "postgres"
          host: "postgres-server"
          database: "tapdb"
          image:
            repository: "postgres"
            tag: "latest"
            pullPolicy: "IfNotPresent"
        uwsDatabaseUsername: "cloudsql-user"
        uwsDatabaseUrl: "cloudsql-instance-url"
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 2  

  - it: should setup TAP_SCHEMA database configuration
    set:
      cloudsql:
        enabled: false
      global:
        host: "example.com"
      config:
        tapSchemaAddress: "tap-schema-address"
        pg:
          username: "postgres"
          host: "postgres-server"
          database: "tapdb"
          image:
            repository: "postgres"
            tag: "latest"
            pullPolicy: "IfNotPresent"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].env[0].value
          pattern: "-Dtapschemauser.url=jdbc:mysql://tap-schema-address/"

  - it: Create GCS bucket configuration with QServ and CloudSQL UWS database 
    set:
      cloudsql:
        enabled: true
        instanceConnectionName: "science-platform--xyz:test"
        serviceAccount: "sa@xyz"
      global:
        host: "example.com"
      config:
        backend: "qserv"
        qserv:
          host: "qserv:30040"
        gcsBucket: "async-results.lsst.codes"
        gcsBucketUrl: "https://async-results.codes:8080"
        gcsBucketType: "S3"
        uwsDatabaseUsername: "cloudsql-user"
        uwsDatabaseUrl: "cloudsql-instance-url"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.username=cloudsql-user"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.url=jdbc:cloudsql-instance-url"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Duws.password="
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "cadc-tap"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Dqservuser.username=qsmaster"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Dqservuser.url=jdbc:mysql://qserv:30040/"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Dgcs_bucket=async-results.lsst.codes"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Dgcs_bucket_url=https://async-results.codes:8080"
      - matchRegex:
          path: spec.template.spec.containers[1].env[0].value
          pattern: "-Dgcs_bucket_type=S3"

  - it: Test that deployment build fails when cloudsql is enabled but no instanceConnectionName
    set:
      cloudsql:
        enabled: true
        serviceAccount: "sa@xyz"
      global:
        host: "example.com"
    asserts:
      - failedTemplate:
          errorMessage: cloudsql.instanceConnectionName must be specified
  